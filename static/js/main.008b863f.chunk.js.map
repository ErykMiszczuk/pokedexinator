{"version":3,"sources":["components/MenuListItem/MenuListItem.jsx","components/MenuList/MenuList.jsx","components/MainMenu/MainMenu.jsx","components/AppContentTopBar/AppContentTopBar.jsx","components/PokemonType/PokemonType.jsx","functions/eventEmitter.js","components/PokemonListItem/PokemonListItem.jsx","components/ContentPaginationChangePageButton/ContentPaginationChangePageButton.jsx","functions/scrollPos.js","components/ContentPagination/ContentPagination.jsx","components/PokemonDetailsDamageRelations/PokemonDetailsDamageRelations.jsx","components/PokemonDetails/PokemonDetails.jsx","hooks/useEventListener.js","components/PokemonList/PokemonList.jsx","components/AppContentArea/AppContentArea.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuListItem","props","className","children","MenuList","MainMenu","AppContentTopBar","PokemonType","pokemonType","type","name","eventEmitter","eventName","data","element","window","customEvent","CustomEvent","detail","dispatchEvent","PokemonListItem","useState","pokemonData","setPokemonData","useEffect","fetch","pokemonDetails","url","then","res","json","showPokemonDetails","useCallback","onClick","src","sprites","front_default","alt","types","map","el","key","ContentPaginationChangePageButton","disabled","value","setElementScrollPos","scrollPos","document","querySelector","scrollTo","top","Y","left","X","behavior","ContentPagination","page","setPage","prevPageDisabled","setPrevPageDisabled","nextPageDisabled","setNextPageDisabled","offset","nextPage","newPage","count","prevPage","Math","ceil","PokemonDetailsDamageRelations","damageRelations","setDamageRelations","damageData","damage_relations","t","R","x","intersectDamageGained","double_damage_from","half_damage_from","intersectDamgeDealed","double_damage_to","half_damage_to","i","no_damage_from","no_damage_to","PokemonDetails","pokemonTypesData","setPokemonTypesData","currentPokemonTypesDetailsData","pokemonTypes","filter","flat","goBack","stats","stat","base_stat","moves","move","useEventListener","handler","savedHandler","useRef","current","addEventListener","eventListener","event","removeEventListener","initialState","reducer","state","action","PokemonList","pokemonList","setPokemonList","setOffset","pokemonTypesList","setPokemonTypesList","useReducer","dispatch","isPokemonDetailShowed","setIsPokemonDetailShowed","setPokemonDetails","scrollPosition","setScrollPostion","e","scrollLeft","scrollTop","getElementScrollPos","requestAnimationFrame","results","forEach","AppContentArea","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"weASeA,MANf,SAAsBC,GAClB,OACI,wBAAIC,UAAU,mBAAmBD,EAAME,WCQhCC,MARf,SAAkBH,GACd,OACI,wBAAIC,UAAU,aACV,kBAAC,EAAD,0BCMGG,MATf,SAAkBJ,GACd,OACI,yBAAKC,UAAU,aACX,4BAAQA,UAAU,YAAlB,mBACA,kBAAC,EAAD,Q,MCAGI,MANf,SAA0BL,GACtB,OACI,yBAAKC,UAAU,0B,yCCQRK,MAVf,SAAqBN,GACjB,OACI,0BACIC,UAAW,8BAAgCD,EAAMO,YAAYC,KAAKC,MAEjET,EAAMO,YAAYC,KAAKC,OCHrBC,MALf,SAAsBC,GAAyC,IAA9BC,EAA6B,uDAAtB,GAAIC,EAAkB,uDAARC,OAC5CC,EAAc,IAAIC,YAAYL,EAAW,CAACM,OAAQL,IACxDC,EAAQK,cAAcH,IC8CXI,MAzCf,SAAyBnB,GAAQ,IAAD,EACUoB,mBAAS,IADnB,mBACrBC,EADqB,KACRC,EADQ,KAG5BC,qBAAU,WACNC,MAAMxB,EAAMyB,eAAeC,KACtBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAf,GAAI,OAAIU,EAAeV,QAClC,CAACZ,EAAMyB,eAAeC,MAEzB,IAAMI,EAAqBC,uBAAY,WACnCrB,EAAa,uBAAwBW,KACtC,CAACA,IAEJ,OACI,wBAAIpB,UAAU,qBACV+B,QAASF,GAET,yBAAK7B,UAAU,uBACX,yBAAKA,UAAU,gBACX,8BAAQD,EAAMyB,eAAehB,OAEjC,yBAAKR,UAAU,iBACToB,EACI,yBACEpB,UAAU,aACVgC,IAAKZ,EAAYa,QAAQC,cACzBC,IAAKpC,EAAMyB,eAAehB,OAE5B,MAEV,yBAAKR,UAAU,iBACToB,EACIA,EAAYgB,MAAMC,KAAI,SAAAC,GAAE,OAAK,kBAAC,EAAD,CAAahC,YAAagC,EAAIC,IAAKD,EAAG/B,KAAKkB,SACxE,S,YC1BXe,MAXf,SAA2CzC,GACvC,OACI,2BACIQ,KAAK,SACLP,UAAS,kDAA6CD,EAAM0C,SAAW,WAAa,WACpFC,MAAO3C,EAAM2C,MACbX,QAAShC,EAAMgC,WCD3B,SAASY,EAAoBL,EAAIM,GACbC,SAASC,cAAcR,GAC/BS,SAAS,CACbC,IAAKJ,EAAUK,EACfC,KAAMN,EAAUO,EAChBC,SAAU,WC0CHC,MA/Cf,SAA2BtD,GAAQ,IAAD,EACNoB,mBAAS,GADH,mBACvBmC,EADuB,KACjBC,EADiB,OAEkBpC,oBAAS,GAF3B,mBAEvBqC,EAFuB,KAELC,EAFK,OAGkBtC,oBAAS,GAH3B,mBAGvBuC,EAHuB,KAGLC,EAHK,KAK9BrC,qBAAU,kBAAMiC,EAAQxD,EAAM6D,UAAS,CAAC7D,EAAM6D,SAE9C,IAAMC,EAAW/B,uBAAY,WACzB,IAAMgC,EAAUR,EAAO,EACnBQ,EAAU/D,EAAMgE,QACpBR,EAAQO,GACRnB,EAAoB,qBAAsB,CAACM,EAAG,EAAGE,EAAG,IACpD1C,EAAa,eAAgB,CAAE6C,KAAMQ,OACtC,CAACR,EAAMvD,EAAMgE,QAEVC,EAAWlC,uBAAY,WACzB,IAAMgC,EAAUR,EAAO,EACnBQ,EAAU,IACdP,EAAQO,GACRnB,EAAoB,qBAAsB,CAACM,EAAG,EAAGE,EAAG,IACpD1C,EAAa,eAAgB,CAAE6C,KAAMQ,OACtC,CAACR,IAOJ,OALAhC,qBAAU,WACOmC,EAAJ,IAATH,GACAA,IAASvD,EAAMgE,MAAQJ,GAAoB,GAAQA,GAAoB,KACxE,CAACL,EAAMvD,EAAMgE,QAGZ,yBAAK/D,UAAU,sBACX,kBAAC,EAAD,CACI+B,QAASiC,EACTtB,MAAM,IACND,SAAUe,IAEd,0BAAMxD,UAAU,mCACVsD,EAAO,EADb,MACqBW,KAAKC,KAAKnE,EAAMgE,MAAQ,KAE7C,kBAAC,EAAD,CACIhC,QAAS8B,EACTnB,MAAM,IACND,SAAUiB,M,gEC2BXS,MArEf,SAAuCpE,GAAQ,IAAD,EAEIoB,mBAAS,IAFb,mBAEnCiD,EAFmC,KAElBC,EAFkB,KA+B1C,OA3BA/C,qBAAU,WAEN,IAAIgD,EAAavE,EAAMqE,gBAAgB/B,KAAI,SAAAC,GAAE,OAAIA,EAAGiC,oBAFxC,cAKOD,GAAdE,EALO,gBAMPnC,KAAI,SAAAC,GAAE,OAAImC,IAAOnC,GAAID,KAAI,SAAAE,GAAG,OAAIiC,EAAEjC,GAAF,sBAAaiC,EAAEjC,IAAf,YAAwBD,EAAGC,WAGhEiC,EAAIC,KAAM,SAAAC,GAAC,OAAID,IAAOC,KAAIF,GAI1B,IAAIG,EAAwBF,IAAeD,EAAEI,mBAAoBJ,EAAEK,kBACnEL,EAAEI,mBAAqBH,IAAaD,EAAEI,mBAAoBD,GAC1DH,EAAEK,iBAAmBJ,IAAaD,EAAEK,iBAAkBF,GAItD,IAAIG,EAAuBL,IAAeD,EAAEO,iBAAkBP,EAAEQ,gBAChER,EAAEO,iBAAmBN,IAAaD,EAAEO,iBAAkBD,GACtDN,EAAEQ,eAAiBP,IAAaD,EAAEQ,eAAgBF,GAElDT,EAAmBG,KAEpB,CAACzE,EAAMqE,kBAEc,KAApBA,EAGI,yBAAKpE,UAAU,qCACX,yBAAKA,UAAU,2BAAf,oBAGA,yBAAKA,UAAU,wCACX,sDACEoE,EAAgBQ,mBAAmBvC,KAAI,SAACC,EAAI2C,GAAL,OAAW,kBAAC,EAAD,CAAa3E,YAAa,CAACC,KAAM+B,GAAKC,IAAG,UAAKD,GAAL,OAAU2C,SAE3G,yBAAKjF,UAAU,sCACX,mDACEoE,EAAgBW,iBAAiB1C,KAAI,SAACC,EAAI2C,GAAL,OAAW,kBAAC,EAAD,CAAa3E,YAAa,CAACC,KAAM+B,GAAKC,IAAG,UAAKD,GAAL,OAAU2C,SAEzG,yBAAKjF,UAAU,sCACX,oDACEoE,EAAgBS,iBAAiBxC,KAAI,SAACC,EAAI2C,GAAL,OAAW,kBAAC,EAAD,CAAa3E,YAAa,CAACC,KAAM+B,GAAKC,IAAG,UAAKD,GAAL,OAAU2C,SAEzG,yBAAKjF,UAAU,oCACX,iDACEoE,EAAgBY,eAAe3C,KAAI,SAACC,EAAI2C,GAAL,OAAW,kBAAC,EAAD,CAAa3E,YAAa,CAACC,KAAM+B,GAAKC,IAAG,UAAKD,GAAL,OAAU2C,SAEvG,yBAAKjF,UAAU,oCACX,kDACEoE,EAAgBc,eAAe7C,KAAI,SAACC,EAAI2C,GAAL,OAAW,kBAAC,EAAD,CAAa3E,YAAa,CAACC,KAAM+B,GAAKC,IAAG,UAAKD,GAAL,OAAU2C,SAEvG,yBAAKjF,UAAU,kCACX,+CACEoE,EAAgBe,aAAa9C,KAAI,SAACC,EAAI2C,GAAL,OAAW,kBAAC,EAAD,CAAa3E,YAAa,CAACC,KAAM+B,GAAKC,IAAG,UAAKD,GAAL,OAAU2C,UAKtG,MCHAG,MA7Df,SAAwBrF,GAAQ,IAAD,EAEqBoB,mBAAS,IAF9B,mBAEpBkE,EAFoB,KAEFC,EAFE,KAI3BhE,qBAAU,WACN,IACIiE,EADsBxF,EAAMqB,YAAYgB,MAAMC,KAAI,SAAAC,GAAE,OAAIA,EAAG/B,KAAKC,QACX6B,KAAI,SAAAC,GAAE,OAAIvC,EAAMyF,aAAaC,QAAO,SAAAlF,GAAI,OAAIA,EAAKC,OAAS8B,QAAKoD,OAExHJ,EAAoBC,KACrB,CAACxF,EAAMqB,YAAYgB,MAAOrC,EAAMyF,eAEnC,IAAMG,EAAS7D,uBAAY,WACvBrB,EAAa,uBACd,IAGH,OACI,yBAAKT,UAAU,mBACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,yBACTD,EAAMqB,YAAYZ,MAExB,yBACIuB,QAAS4D,EACT3F,UAAU,UAFd,SAOJ,yBAAKA,UAAU,4BACX,yBACIA,UAAU,yBACVgC,IAAKjC,EAAMqB,YAAYa,QAAQC,cAC/BC,IAAKpC,EAAMqB,YAAYZ,QAG/B,yBAAKR,UAAU,0BACX,yBAAKA,UAAU,2BAAf,mBAGED,EAAMqB,YAAYgB,MAAMC,KAAI,SAAAC,GAAE,OAAK,kBAAC,EAAD,CAAahC,YAAagC,EAAIC,IAAKD,EAAG/B,KAAKkB,SAChF,2BAAOzB,UAAU,cAIb,+BACMD,EAAMqB,YAAYwE,MAAMvD,KAAI,SAAAC,GAAE,OAAK,wBAAItC,UAAU,uBAAuBuC,IAAKD,EAAGuD,KAAKpE,KAAK,4BAAMa,EAAGuD,KAAKrF,MAAW,4BAAM8B,EAAGwD,kBAInH,KAArBT,EAA0B,kBAAC,EAAD,CAA+BjB,gBAAiBiB,IAAuB,KACnG,yBAAKrF,UAAU,0BACX,yBAAKA,UAAU,2BAAf,SACA,wBAAIA,UAAU,cACRD,EAAMqB,YAAY2E,MAAM1D,KAAI,SAAAC,GAAE,OAAK,wBAAItC,UAAU,mBAAmBuC,IAAKD,EAAG0D,KAAKvE,KAA9C,IAAsDa,EAAG0D,KAAKxF,aCKxGyF,MAhEf,SAA0BvF,EAAWwF,GAA4B,IAAnBtF,EAAkB,uDAARC,OAGhDsF,EAAeC,mBAYrB9E,qBAAU,WAER6E,EAAaE,QAAUH,IAEtB,CAACA,IAIJ5E,qBAEE,WAQE,GAFoBV,GAAWA,EAAQ0F,iBAEvC,CAMA,IAAMC,EAAgB,SAAAC,GAAK,OAAIL,EAAaE,QAAQG,IAYpD,OANA5F,EAAQ0F,iBAAiB5F,EAAW6F,GAM7B,WAEL3F,EAAQ6F,oBAAoB/F,EAAW6F,OAM3C,CAAC7F,EAAWE,KCpDV8F,EAAe,GAErB,SAASC,EAAQC,EAAOC,GACpB,OAAQA,EAAOtG,MACX,IAAK,QACD,MAAM,GAAN,mBAAWqG,GAAX,CAAkBC,EAAOlG,OAC7B,QACI,OAAOiG,GA0EJE,MAtEf,SAAqB/G,GAAQ,IAAD,EAEcoB,mBAAS,IAFvB,mBAEjB4F,EAFiB,KAEJC,EAFI,OAGI7F,mBAAS,GAHb,mBAGjByC,EAHiB,KAGTqD,EAHS,OAIwB9F,mBAAS,IAJjC,mBAIjB+F,EAJiB,KAICC,EAJD,OAKEC,qBAAWT,EAASD,GALtB,mBAKjBE,EALiB,KAKVS,EALU,OAMkClG,oBAAS,GAN3C,mBAMjBmG,EANiB,KAMMC,EANN,OAOoBpG,mBAAS,IAP7B,mBAOjBK,EAPiB,KAODgG,EAPC,OAQmBrG,mBAAS,IAR5B,mBAQjBsG,EARiB,KAQDC,EARC,KAqDxB,OA3CAzB,EAAiB,gBAAgB,SAAC0B,GAC9BV,EAAUU,EAAE3G,OAAOsC,SAGvB2C,EAAiB,wBAAwB,SAAC0B,GACtCD,ELpCR,SAA6BpF,GACzB,IAAM1B,EAAUiC,SAASC,cAAcR,GACvC,MAAO,CACHa,EAAGvC,EAAQgH,WACX3E,EAAGrC,EAAQiH,WKgCMC,CAAoB,uBACrCN,EAAkBG,EAAE3G,QACpBuG,GAAyB,GACzB1G,OAAOkH,uBAAsB,WACzBpF,EAAoB,qBAAsB,CAACM,EAAG,EAAGE,EAAG,UAI5D8C,EAAiB,qBAAqB,SAAC0B,GACnCJ,GAAyB,GACzBC,EAAkB,IAClB3G,OAAOkH,uBAAsB,WACzBpF,EAAoB,qBAAsB8E,SAIlDnG,qBAAU,WACNC,MAAM,sDAAD,OAAgE,GAATqC,IACvDlC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAf,GAAI,OAAIqG,EAAerG,QAClC,CAACiD,IAEJtC,qBAAU,WACNC,MAAM,mCACDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAf,GAAI,OAAIwG,EAAoBxG,QACvC,IAEHW,qBAAU,WACF4F,EAAiBc,SACjBd,EAAiBc,QAAQC,SAAQ,SAAA3F,GAC7Bf,MAAMe,EAAGb,KACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAf,GAAI,OAAI0G,EAAS,CAAC9G,KAAM,QAASI,iBAGpD,CAACuG,IAGAI,EACM,kBAAC,EAAD,CACElG,YAAaI,EACbgE,aAAcoB,IAEhB,oCACE,wBAAI5G,UAAU,gBAEN+G,EAAYiB,QAAUjB,EAAYiB,QAAQ3F,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAiBd,eAAgBc,EAAIC,IAAKD,EAAGb,SAAU,MAGnH,kBAAC,EAAD,CAAmBsC,MAAOgD,EAAYhD,MAAOH,OAAQA,MCvEtDsE,MAVf,SAAwBnI,GACpB,OACI,yBAAKC,UAAU,kBACX,0BAAMA,UAAU,qBACZ,kBAAC,EAAD,SCQDmI,MAVf,WACE,OACE,yBAAKnI,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcoI,QACW,cAA7BvH,OAAOwH,SAASC,UAEe,UAA7BzH,OAAOwH,SAASC,UAEhBzH,OAAOwH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7F,SAAS8F,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpH,MAAK,SAAAqH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,e","file":"static/js/main.008b863f.chunk.js","sourcesContent":["import React from 'react';\nimport './MenuListItem.css';\n\nfunction MenuListItem(props) {\n    return (\n        <li className=\"menu_list__item\">{props.children}</li>\n    )\n}\n\nexport default MenuListItem;","import React from 'react';\nimport './MenuList.css';\n\nimport MenuListItem from '../MenuListItem/MenuListItem.jsx';\n\nfunction MenuList(props) {\n    return (\n        <ul className=\"menu_list\">\n            <MenuListItem> Pokemons List </MenuListItem>\n        </ul>\n    )\n}\n\nexport default MenuList;","import React from 'react';\nimport './MainMenu.css';\n\nimport MenuList from '../MenuList/MenuList.jsx';\n\nfunction MainMenu(props) {\n    return (\n        <div className=\"main_menu\">\n            <header className=\"app_name\"> Pokedexinator </header>\n            <MenuList />\n        </div>\n    )\n}\n\nexport default MainMenu;","import React from 'react';\nimport './AppContentTopBar.css';\n\nfunction AppContentTopBar(props) {\n    return (\n        <div className=\"app_content__top_bar\"></div>\n    )\n}\n\nexport default AppContentTopBar;","import React from 'react';\nimport './PokemonType.css';\n\nfunction PokemonType(props) {\n    return (\n        <span \n            className={\"pokemon_type pokemon_type--\" + props.pokemonType.type.name}\n        >\n            {props.pokemonType.type.name}\n        </span>\n    )\n}\n\nexport default PokemonType;","function eventEmitter(eventName, data = {}, element = window) {\n    const customEvent = new CustomEvent(eventName, {detail: data});\n    element.dispatchEvent(customEvent)\n}\n\nexport default eventEmitter;","import React, { useState, useEffect, useCallback } from 'react';\nimport './PokemonListItem.css';\n\nimport PokemonType from '../PokemonType/PokemonType.jsx';\n\nimport eventEmitter from '../../functions/eventEmitter';\n\nfunction PokemonListItem(props) {\n    const [pokemonData, setPokemonData] = useState('');\n    \n    useEffect(() => {\n        fetch(props.pokemonDetails.url)\n            .then(res => res.json())\n            .then(data => setPokemonData(data))\n    }, [props.pokemonDetails.url])\n\n    const showPokemonDetails = useCallback(() => {\n        eventEmitter('SHOW_POKEMON_DETAILS', pokemonData);\n    }, [pokemonData])\n\n    return (\n        <li className=\"pokemon_list__item\"\n            onClick={showPokemonDetails}\n        >\n            <div className=\"pokemon_description\">\n                <div className=\"pokemon_name\">\n                    <span>{ props.pokemonDetails.name }</span>\n                </div>\n                <div className=\"pokemon_image\">\n                    { pokemonData \n                        ? <img \n                            className=\"full_image\" \n                            src={pokemonData.sprites.front_default} \n                            alt={props.pokemonDetails.name} \n                          /> \n                        : null }\n                </div>\n                <div className=\"pokemon_stats\">\n                    { pokemonData\n                        ? pokemonData.types.map(el => (<PokemonType pokemonType={el} key={el.type.url}/>))\n                        : null\n                    }\n                </div>\n            </div>\n        </li>\n    )\n}\n\nexport default PokemonListItem;","import React from 'react';\nimport './ContentPaginationChangePageButton.css';\n\nfunction ContentPaginationChangePageButton(props) {\n    return (\n        <input \n            type=\"button\" \n            className={`content_pagination__change_page_button--${props.disabled ? 'disabled' : 'enabled'}`} \n            value={props.value}\n            onClick={props.onClick}\n        />\n    )\n}\n\nexport default ContentPaginationChangePageButton;","function getElementScrollPos(el) {\n    const element = document.querySelector(el);\n    return {\n        X: element.scrollLeft,\n        Y: element.scrollTop,\n    }\n}\n\nfunction setElementScrollPos(el, scrollPos) {\n    const element = document.querySelector(el);\n    element.scrollTo({\n        top: scrollPos.Y,\n        left: scrollPos.X,\n        behavior: 'smooth'\n    })\n}\n\nexport {\n    getElementScrollPos,\n    setElementScrollPos\n}","import React, { useState, useCallback, useEffect } from 'react';\nimport './ContentPagination.css';\n\nimport ContentPaginationChangePageButton from '../ContentPaginationChangePageButton/ContentPaginationChangePageButton.jsx';\n\nimport eventEmitter from '../../functions/eventEmitter';\nimport { setElementScrollPos } from '../../functions/scrollPos';\n\nfunction ContentPagination(props) {\n    const [page, setPage] = useState(0);\n    const [prevPageDisabled, setPrevPageDisabled] = useState(true);\n    const [nextPageDisabled, setNextPageDisabled] = useState(false);\n\n    useEffect(() => setPage(props.offset), [props.offset]);\n\n    const nextPage = useCallback(() => {\n        const newPage = page + 1;\n        if (newPage > props.count) return; \n        setPage(newPage);\n        setElementScrollPos(\".app_content__area\", {Y: 0, X: 0});\n        eventEmitter(\"PAGE_CHANGED\", { page: newPage });\n    }, [page, props.count])\n    \n    const prevPage = useCallback(() => {\n        const newPage = page - 1;\n        if (newPage < 0) return;\n        setPage(newPage);\n        setElementScrollPos(\".app_content__area\", {Y: 0, X: 0});\n        eventEmitter(\"PAGE_CHANGED\", { page: newPage });\n    }, [page])\n\n    useEffect(() => {\n        page === 0 ? setPrevPageDisabled(true) : setPrevPageDisabled(false);\n        page === props.count ? setNextPageDisabled(true) : setNextPageDisabled(false);\n    }, [page, props.count])\n\n    return (\n        <div className=\"content_pagination\">\n            <ContentPaginationChangePageButton \n                onClick={prevPage}\n                value=\"P\"\n                disabled={prevPageDisabled} \n            />\n            <span className=\"content_pagination__page_number\">\n                { page + 1 } z { Math.ceil(props.count / 24)}\n            </span>\n            <ContentPaginationChangePageButton \n                onClick={nextPage}\n                value=\"N\"\n                disabled={nextPageDisabled}\n            />\n        </div>\n    )\n}\n\nexport default ContentPagination;","import React, { useEffect, useState } from 'react';\nimport './PokemonDetailsDamageRelations.css';\n\nimport PokemonType from '../PokemonType/PokemonType';\n\nimport * as R from 'ramda';\n\nfunction PokemonDetailsDamageRelations(props) {\n\n    const [damageRelations, setDamageRelations] = useState('');\n\n    useEffect(() => {\n        // droping unnecesary data, coz we dont need data about pokemon generation, just damage relations of all pokemon types\n        let damageData = props.damageRelations.map(el => el.damage_relations)\n\n        // merge all damage relations in one object\n        let [t, ...rest] = damageData;\n        rest.map(el => R.keys(el).map(key => t[key] = [...t[key], ...el[key]]));\n\n        // delete repeating data in object values\n        t = R.map(x => R.uniq(x), t);\n\n        // intersection of pokemon types that deal double and half damage \n        // realy deal normal damage so we need to exclude them from both sets\n        let intersectDamageGained = R.intersection(t.double_damage_from, t.half_damage_from);\n        t.double_damage_from = R.difference(t.double_damage_from, intersectDamageGained)\n        t.half_damage_from = R.difference(t.half_damage_from, intersectDamageGained)\n\n        // intersection of pokemon types that receive from our pokemon double and half damage \n        // actualy receive normal damage so like in above code we need to exclude intersected pokemon types\n        let intersectDamgeDealed = R.intersection(t.double_damage_to, t.half_damage_to);\n        t.double_damage_to = R.difference(t.double_damage_to, intersectDamgeDealed)\n        t.half_damage_to = R.difference(t.half_damage_to, intersectDamgeDealed)\n\n        setDamageRelations(t)\n\n    }, [props.damageRelations])\n\n    if (damageRelations !== '') {\n\n        return (\n            <div className=\"pokemon_details__damage_relations\">\n                <div className=\"pokemon_details__header\">\n                    Damage relations\n                </div>\n                <div className=\"damage_relations__double_damage_from\">\n                    <div>Receive double damage</div>\n                    { damageRelations.double_damage_from.map((el, i) => <PokemonType pokemonType={{type: el}} key={`${el}${i}`} />) }\n                </div>\n                <div className=\"damage_relations__double_damage_to\">\n                    <div>Deal double damage</div>\n                    { damageRelations.double_damage_to.map((el, i) => <PokemonType pokemonType={{type: el}} key={`${el}${i}`} />) }\n                </div>\n                <div className=\"damage_relations__half_damage_from\">\n                    <div>Receive half damage</div>\n                    { damageRelations.half_damage_from.map((el, i) => <PokemonType pokemonType={{type: el}} key={`${el}${i}`} />) }\n                </div>\n                <div className=\"damage_relations__half_damage_to\">\n                    <div>Deal half damage</div>\n                    { damageRelations.half_damage_to.map((el, i) => <PokemonType pokemonType={{type: el}} key={`${el}${i}`} />) }\n                </div>\n                <div className=\"damage_relations__no_damage_from\">\n                    <div>Receive no damage</div>\n                    { damageRelations.no_damage_from.map((el, i) => <PokemonType pokemonType={{type: el}} key={`${el}${i}`} />) }\n                </div>\n                <div className=\"damage_relations__no_damage_to\">\n                    <div>Deal no damage</div>\n                    { damageRelations.no_damage_to.map((el, i) => <PokemonType pokemonType={{type: el}} key={`${el}${i}`} />) }\n                </div>\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n\nexport default PokemonDetailsDamageRelations;","import React, { useState, useEffect, useCallback } from 'react';\nimport './PokemonDetails.css';\n\nimport PokemonType from '../PokemonType/PokemonType.jsx';\nimport PokemonDetailsDamageRelations from '../PokemonDetailsDamageRelations/PokemonDetailsDamageRelations.jsx';\n\nimport eventEmitter from '../../functions/eventEmitter';\n\nfunction PokemonDetails(props) {\n\n    const [pokemonTypesData, setPokemonTypesData] = useState('')\n\n    useEffect(() => {\n        let currentPokemonTypes = props.pokemonData.types.map(el => el.type.name)\n        let currentPokemonTypesDetailsData = currentPokemonTypes.map(el => props.pokemonTypes.filter(type => type.name === el)).flat()\n\n        setPokemonTypesData(currentPokemonTypesDetailsData);\n    }, [props.pokemonData.types, props.pokemonTypes]);\n\n    const goBack = useCallback(() => {\n        eventEmitter(\"SHOW_POKEMON_LIST\");\n    }, [])\n\n\n    return (\n        <div className=\"pokemon_details\">\n            <div className=\"pokemon_details__main_header\">\n                <div className=\"pokemon_details__name\"> \n                    { props.pokemonData.name } \n                </div>\n                <div\n                    onClick={goBack}\n                    className=\"button\"\n                >\n                    Back\n                </div>\n            </div>\n            <div className=\"pokemon_details__gallery\">\n                <img\n                    className=\"pokemon_details__image\"\n                    src={props.pokemonData.sprites.front_default}\n                    alt={props.pokemonData.name}\n                />\n            </div>\n            <div className=\"pokemon_details__stats\">\n                <div className=\"pokemon_details__header\">\n                    Characteristics\n                </div>\n                { props.pokemonData.types.map(el => (<PokemonType pokemonType={el} key={el.type.url}/>)) }\n                <table className=\"data_table\">\n                    {/* <thead className=\"data_table__header\">\n                        <tr><th>Stat</th><th>Value</th></tr>\n                    </thead> */}\n                    <tbody>\n                        { props.pokemonData.stats.map(el => (<tr className=\"data_table__data_row\" key={el.stat.url}><td>{ el.stat.name }</td><td>{ el.base_stat }</td></tr>)) }\n                    </tbody>\n                </table>\n            </div>\n            { pokemonTypesData !== '' ? <PokemonDetailsDamageRelations damageRelations={pokemonTypesData} /> : null }\n            <div className=\"pokemon_details__moves\"> \n                <div className=\"pokemon_details__header\">Moves</div>\n                <ul className=\"moves_list\">\n                    { props.pokemonData.moves.map(el => (<li className=\"moves_list__item\" key={el.move.url}> { el.move.name }</li>))}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default PokemonDetails;","// source https://usehooks.com/useEventListener/\nimport { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, element = window) {\n    // Create a ref that stores handler\n\n  const savedHandler = useRef();\n\n  \n\n  // Update ref.current value if handler changes.\n\n  // This allows our effect below to always get latest handler ...\n\n  // ... without us needing to pass it in effect deps array ...\n\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n\n    savedHandler.current = handler;\n\n  }, [handler]);\n\n\n\n  useEffect(\n\n    () => {\n\n      // Make sure element supports addEventListener\n\n      // On \n\n      const isSupported = element && element.addEventListener;\n\n      if (!isSupported) return;\n\n      \n\n      // Create event listener that calls handler function stored in ref\n\n      const eventListener = event => savedHandler.current(event);\n\n      \n\n      // Add event listener\n\n      element.addEventListener(eventName, eventListener);\n\n      \n\n      // Remove event listener on cleanup\n\n      return () => {\n\n        element.removeEventListener(eventName, eventListener);\n\n      };\n\n    },\n\n    [eventName, element] // Re-run if eventName or element changes\n\n  );\n}\n\nexport default useEventListener;","import React, { useEffect, useState, useReducer } from 'react';\nimport './PokemonList.css';\n\nimport PokemonListItem from '../PokemonListItem/PokemonListItem.jsx';\nimport ContentPagination from '../ContentPagination/ContentPagination.jsx';\nimport PokemonDetails from '../PokemonDetails/PokemonDetails.jsx';\n\nimport useEventListener from '../../hooks/useEventListener';\nimport { getElementScrollPos, setElementScrollPos } from '../../functions/scrollPos';\n\nconst initialState = []\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'merge':\n            return [...state, action.data];\n        default:\n            return state;\n    }\n}\n\nfunction PokemonList(props) {\n\n    const [pokemonList, setPokemonList] = useState({});\n    const [offset, setOffset] = useState(0);\n    const [pokemonTypesList, setPokemonTypesList] = useState({});\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [isPokemonDetailShowed, setIsPokemonDetailShowed] = useState(false);\n    const [pokemonDetails, setPokemonDetails] = useState({});\n    const [scrollPosition, setScrollPostion] = useState('');\n\n    useEventListener('PAGE_CHANGED', (e) => {\n        setOffset(e.detail.page);\n    });\n\n    useEventListener('SHOW_POKEMON_DETAILS', (e) => {\n        setScrollPostion(getElementScrollPos(\".app_content__area\"));\n        setPokemonDetails(e.detail);\n        setIsPokemonDetailShowed(true);\n        window.requestAnimationFrame(() => {\n            setElementScrollPos(\".app_content__area\", {Y: 0, X: 0});\n        })\n    });\n    \n    useEventListener('SHOW_POKEMON_LIST', (e) => {\n        setIsPokemonDetailShowed(false);\n        setPokemonDetails({});\n        window.requestAnimationFrame(() => {\n            setElementScrollPos(\".app_content__area\", scrollPosition);\n        })\n    })\n\n    useEffect(() => {\n        fetch(`https://pokeapi.co/api/v2/pokemon/?limit=24&offset=${offset * 24}`)\n            .then(res => res.json())\n            .then(data => setPokemonList(data));\n    }, [offset])\n\n    useEffect(() => {\n        fetch(`https://pokeapi.co/api/v2/type/`)\n            .then(res => res.json())\n            .then(data => setPokemonTypesList(data))\n    }, [])\n\n    useEffect(() => {\n        if (pokemonTypesList.results) {\n            pokemonTypesList.results.forEach(el => {\n                fetch(el.url)\n                    .then(res => res.json())\n                    .then(data => dispatch({type: 'merge', data}))\n            })\n        }\n    }, [pokemonTypesList])\n\n    return (\n        isPokemonDetailShowed \n            ? <PokemonDetails \n                pokemonData={pokemonDetails} \n                pokemonTypes={state}\n              />\n            : <>\n                <ul className=\"pokemon_list\">\n                    {\n                        pokemonList.results ? pokemonList.results.map(el => <PokemonListItem pokemonDetails={el} key={el.url}/>) : null\n                    }\n                </ul>\n                <ContentPagination count={pokemonList.count} offset={offset}/>\n              </>\n    )\n}\n\nexport default PokemonList;","import React from 'react';\nimport './AppContentArea.css';\n\nimport PokemonList from '../PokemonList/PokemonList.jsx';\n\nfunction AppContentArea(props) {\n    return (\n        <div className=\"shadow_wrapper\">\n            <main className=\"app_content__area\">\n                <PokemonList />\n            </main>\n        </div>\n    )\n}\n\nexport default AppContentArea;","import React from 'react'\nimport './App.css';\n\nimport MainMenu from './components/MainMenu/MainMenu.jsx';\nimport AppContentTopBar from './components/AppContentTopBar/AppContentTopBar.jsx';\nimport AppContentArea from './components/AppContentArea/AppContentArea.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainMenu />\n      <AppContentTopBar />\n      <AppContentArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}